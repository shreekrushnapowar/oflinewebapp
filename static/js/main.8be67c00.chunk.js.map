{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","service/api.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","id","title","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuidv4","TextField","label","type","name","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","key","axios","require","fetchTodos","a","navigator","onLine","get","then","res","result","data","length","slice","catch","error","console","JSON","parse","localStorage","getItem","App","setTodos","mode","setMode","useEffect","log","setItem","stringify","padding","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8be67c00.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction TodoForm({ addTodo }) {\n    const [todo, setTodo] = useState({\n        id: \"\",\n        title: \"\",\n        completed: false\n    });\n\n    function handleTaskInputChange(e) {\n        setTodo({ ...todo, title: e.target.value });\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (todo.title.trim()) {\n            addTodo({ ...todo, id: uuidv4() });\n            setTodo({ ...todo, title: \"\" });\n        }\n    }\n\n    return (\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\n            <TextField\n                label=\"Task\"\n                type=\"text\"\n                name=\"title\"\n                value={todo.title}\n                onChange={handleTaskInputChange}\n            />\n            <Button type=\"submit\">Submit</Button>\n        </form>\n    );\n}\n\nexport default TodoForm;\n","\nimport { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nfunction Todo({ todo, toggleComplete, removeTodo }) {\n    function handleCheckboxClick() {\n        toggleComplete(todo.id);\n    }\n\n    function handleRemoveClick() {\n        removeTodo(todo.id);\n    }\n\n    return (\n        <ListItem style={{ display: \"flex\" }}>\n            <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\n            <Typography\n                variant=\"body1\"\n                style={{\n                    textDecoration: todo.completed ? \"line-through\" : null\n                }}\n            >\n                {todo.title}\n            </Typography>\n            <IconButton onClick={handleRemoveClick}>\n                <CloseIcon />\n            </IconButton>\n        </ListItem>\n    );\n}\n\nexport default Todo;\n","import { List } from \"@material-ui/core\";\nimport React from \"react\";\nimport Todo from \"./Todo\";\n\nfunction TodoList({ todos, removeTodo, toggleComplete }) {\n    return (\n        <List>\n            {todos.map(todo => (\n                <Todo\n                    key={todo.id}\n                    todo={todo}\n                    removeTodo={removeTodo}\n                    toggleComplete={toggleComplete}\n                />\n            ))}\n        </List>\n    );\n}\n\nexport default TodoList;\n","const axios = require('axios');\n\nconst fetchTodos = async () => {\n\n    if(navigator.onLine)\n    { const url = 'https://jsonplaceholder.typicode.com/todos';\n    return await axios.get(url)\n            .then(res => {\n                const result = res.data;\n                if (result && result.length !== 0) {\n                    return result.slice(0, 10);\n                }\n                return [];\n            }).catch(error => {\n                console.error(error);\n                return [];\n            });\n    }\n    else{\n        return JSON.parse(localStorage.getItem('todo-list')).slice(0,10)\n    }\n};\n\nexport default fetchTodos;\n","import Typography from \"@material-ui/core/Typography\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport fetchTodos from \"./service/api\";\n\nconst LOCAL_STORAGE_KEY = \"todo-list\";\n\nfunction App() {\n    const [todos, setTodos] = useState([]);\n    const [mode, setMode] = useState('online');\n     \n    useEffect(() => {\n        navigator.onLine?setMode():setMode('Currently on offline mode')\n        fetchTodos()\n            .then(result => {\n             \n                console.log(result)\n                setTodos(result);\n            });\n\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n    }, [todos]);\n\n    function addTodo(todo) {\n        setTodos([todo, ...todos]);\n    }\n\n    function toggleComplete(id) {\n        if (todos) {\n            setTodos(\n                todos.map(todo => {\n                    if (todo.id === id) {\n                        return {\n                            ...todo,\n                            completed: !todo.completed\n                        };\n                    }\n                    return todo;\n                })\n            );\n        }\n    }\n\n    function removeTodo(id) {\n        setTodos(todos.filter(todo => todo.id !== id));\n    }\n\n    return (\n        <div className=\"App\">\n            <Typography style={{ padding: 16 }} variant=\"h1\">\n                React Todo\n                \n            </Typography>\n            {mode}\n            <TodoForm addTodo={addTodo} />\n            <TodoList\n                todos={todos}\n                removeTodo={removeTodo}\n                toggleComplete={toggleComplete}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}